{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","navColor","navTextColor","mode","className","style","color","href","title","type","id","role","onClick","toggleMode","TextForm","useState","text","setText","onChange","event","target","value","rows","console","log","toUpperCase","showAlert","toLowerCase","temp","i","length","newText","split","join","document","getElementById","select","navigator","clipboard","writeText","defaultProps","Alert","alert","msg","App","darkMode","setDarkMode","setAlert","message","setTimeout","theme","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4MAIe,SAASA,EAAOC,GAC3B,IAAIC,EAAS,QACTC,EAAa,QAKjB,MAJkB,UAAfF,EAAMG,OACPF,EAAS,OACTC,EAAa,SAGX,8BACA,qBAAKE,UAAW,kCAAmCH,EAAU,OAAQA,EAArE,SACA,sBAAKG,UAAU,kBAAf,UACQ,mBAAGA,UAAU,eAAeC,MAAO,CAACC,MAAOJ,GAAeK,KAAK,IAA/D,SAAoEP,EAAMQ,QAChF,wBAAQJ,UAAU,iBAAiBK,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAML,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BM,GAAG,yBAA7C,UACE,oBAAIN,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOC,MAAO,CAACC,MAAOJ,GAAeK,KAAK,IAAtF,sBAOJ,sBAAKH,UAAU,oBAAf,UACF,qBAAKA,UAAU,gCAAgCG,KAAK,IAAIG,GAAG,iBAAiBC,KAAK,SAAS,iBAAe,WAAW,gBAAc,QAAlI,oBAGE,qBAAIP,UAAU,gBAAgB,kBAAgB,iBAA9C,UACE,oBAAIA,UAAU,gBAAgBM,GAAG,QAAQE,QAASZ,EAAMa,WAAxD,mBACA,oBAAIT,UAAU,gBAAgBM,GAAG,OAAOE,QAASZ,EAAMa,WAAvD,kBACA,oBAAIT,UAAU,gBAAgBM,GAAG,QAAQE,QAASZ,EAAMa,WAAxD,mBACA,oBAAIT,UAAU,gBAAgBM,GAAG,OAAOE,QAASZ,EAAMa,WAAvD,kCClCC,SAASC,EAASd,GAC7B,IA+CA,EAAwBe,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACI,qCACA,sBAAKb,UAAU,YAAf,UACI,kEACA,qBAAKA,UAAU,OAAf,SACA,0BAAUA,UAAU,eAAeM,GAAG,SAASQ,SAVhC,SAACC,GACpBF,EAAQE,EAAMC,OAAOC,QASwDA,MAAOL,EAAMM,KAAK,SAE3F,wBAAQlB,UAAU,kBAAkBQ,QAvDtB,WAClBW,QAAQC,IAAI,0BACZP,EAAQD,EAAKS,eACbzB,EAAM0B,UAAU,iCAAkC,YAoD9C,kCACA,wBAAQtB,UAAU,uBAAuBQ,QAlD3B,WAClBK,EAAQD,EAAKW,eACb3B,EAAM0B,UAAU,iCAAkC,YAgD9C,kCACA,wBAAQtB,UAAU,uBAAuBQ,QA9C1B,WAEnB,IADA,IAAIgB,EAAO,GACHC,EAAE,EAAEA,EAAEb,EAAKc,OAAOD,IACnBb,EAAKa,KAAKb,EAAKa,GAAGJ,gBACjBG,GAAYZ,EAAKa,GAAGF,eAErBX,EAAKa,KAAOb,EAAKa,GAAGF,gBACnBC,GAAYZ,EAAKa,GAAGJ,eAG5BR,EAAQW,GACR5B,EAAM0B,UAAU,mCAAoC,YAmChD,sCACA,wBAAQtB,UAAU,uBAAuBQ,QA1BvB,WACtB,IAAImB,EAAUf,EAAKgB,MAAM,SACzBf,EAAQc,EAAQE,KAAK,MACrBjC,EAAM0B,UAAU,sCAAuC,YAuBnD,iCACA,wBAAQtB,UAAU,uBAAuBQ,QAlC9B,WACf,IAAII,EAAOkB,SAASC,eAAe,UACnCnB,EAAKoB,SACLC,UAAUC,UAAUC,UAAUvB,EAAKK,OACnCrB,EAAM0B,UAAU,gCAAiC,YA8B7C,uBACA,wBAAQtB,UAAU,sBAAsBQ,QAtBvB,WACrBK,EAAQ,IACRjB,EAAM0B,UAAU,yBAA0B,YAoBtC,sBAEJ,sBAAKtB,UAAU,iBAAf,UACI,mDACA,8BAAmB,IAAdY,EAAKc,OAAY,EAAGd,EAAKgB,MAAM,KAAKF,OAAzC,WAA0Dd,EAAKc,OAA/D,kBACA,8BAAmB,IAAdd,EAAKc,OAAY,EAAG,KAAQd,EAAKgB,MAAM,KAAKF,OAAjD,oBACA,6BAAmB,IAAdd,EAAKc,OAAW,gCAAgC,YACrD,4BAAId,UDrBhBjB,EAAOyC,aAAe,CAAChC,MAAO,mBEpCfiC,MAZf,SAAezC,GACX,OACIA,EAAM0C,OACN,8BACI,sBAAKtC,UAAS,sBAAiBJ,EAAM0C,MAAMjC,KAA7B,gCAAiEE,KAAK,QAApF,UACI,iCAAUX,EAAM0C,MAAMjC,KAAMgB,gBADhC,OAC4DzB,EAAM0C,MAAMC,UCmErEC,MA9Df,WACE,MAAgC7B,mBAAS,SAAzC,mBAAO8B,EAAP,KAAiBC,EAAjB,KACA,EAA0B/B,mBAAS,MAAnC,mBAAO2B,EAAP,KAAcK,EAAd,KAEMrB,EAAY,SAACsB,EAASvC,GAC1BsC,EAAS,CAACJ,IAAKK,EAASvC,KAAMA,IAC9BwC,YAAW,WACTF,EAAS,QACR,OAiCL,OACE,qCAEE,cAAChD,EAAD,CAAQS,MAAM,aAAaL,KAAM0C,EAAUhC,WAjC5B,SAACM,GAClB,IAAI+B,EAAQ/B,EAAMC,OAAOV,GACd,UAARwC,GACDJ,EAAY,SACZZ,SAASiB,KAAK9C,MAAM+C,gBAAgB,QACpClB,SAASiB,KAAK9C,MAAMC,MAAM,QAC1BoB,EAAU,+BAAgC,YAE5B,SAARwB,GACNJ,EAAY,QACZZ,SAASiB,KAAK9C,MAAM+C,gBAAgB,UACpClB,SAASiB,KAAK9C,MAAMC,MAAM,QAC1BoB,EAAU,8BAA+B,YAE3B,UAARwB,GACNJ,EAAY,SACZZ,SAASiB,KAAK9C,MAAM+C,gBAAgB,UACpClB,SAASiB,KAAK9C,MAAMC,MAAM,QAC1BoB,EAAU,+BAAgC,aAG1CoB,EAAY,QACZZ,SAASiB,KAAK9C,MAAM+C,gBAAgB,OACpClB,SAASiB,KAAK9C,MAAMC,MAAM,QAC1BoB,EAAU,8BAA+B,eAUzC,sBAAKtB,UAAU,iBAAf,UAOQ,cAAC,EAAD,CAAOsC,MAAOA,IACd,cAAC5B,EAAD,CAAUY,UAAWA,WCrDpB2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAASC,eAAe,SAM1BkB,K","file":"static/js/main.3780378e.chunk.js","sourcesContent":["import React from 'react'\r\nimport {PropTypes} from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    let navColor=\"light\";\r\n    let navTextColor=\"black\"\r\n    if(props.mode !== \"light\"){\r\n      navColor=\"dark\";\r\n      navTextColor=\"white\"\r\n    }\r\n    return (\r\n        <div>\r\n        <nav className={\"navbar navbar-expand-lg navbar-\"+ navColor +\" bg-\"+ navColor}>\r\n        <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" style={{color: navTextColor}} href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" style={{color: navTextColor}} href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" style={{color: navTextColor}} to=\"/about\">About</Link>\r\n              </li> */}\r\n            </ul>\r\n            \r\n            <div className=\"nav-item dropdown\">\r\n          <div className=\"nav-item mx-3 dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n            Themes\r\n          </div>\r\n            <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n              <li className=\"dropdown-item\" id=\"light\" onClick={props.toggleMode}>Light</li>\r\n              <li className=\"dropdown-item\" id=\"dark\" onClick={props.toggleMode}>Dark</li>\r\n              <li className=\"dropdown-item\" id=\"green\" onClick={props.toggleMode}>Green</li>\r\n              <li className=\"dropdown-item\" id=\"grey\" onClick={props.toggleMode}>Grey</li>\r\n            </ul>\r\n           </div>\r\n\r\n          </div>\r\n        </div>\r\n      </nav>\r\n      </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string}\r\n\r\nNavbar.defaultProps = {title: 'Title goes here'}","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        console.log('UpperCase was clicked!')\r\n        setText(text.toUpperCase())\r\n        props.showAlert(\"All letters set to upper-case!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        setText(text.toLowerCase())\r\n        props.showAlert(\"All letters set to lower-case!\", \"success\");\r\n    }\r\n\r\n    const handleAltClick = ()=>{\r\n        let temp = \"\"\r\n        for(let i=0;i<text.length;i++){\r\n            if(text[i]===text[i].toUpperCase()){\r\n                temp = temp+text[i].toLowerCase()\r\n            }\r\n            if(text[i] === text[i].toLowerCase()){\r\n                temp = temp+text[i].toUpperCase()\r\n            }\r\n        }\r\n        setText(temp)\r\n        props.showAlert(\"Alternate case action performed.\", \"success\");\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById('my-box')\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Text copied to the clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[  ]+/)\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed from the text.\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        setText(\"\")\r\n        props.showAlert(\"Text has been cleared!\", \"warning\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <h2>Enter the text below to analyze!</h2>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" id=\"my-box\" onChange={handleOnChange} value={text} rows=\"10\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleAltClick}>Convert to AlternateCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-danger mx-2\" onClick={handleClearClick}>Clear</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h2>Your text summary</h2>\r\n            <p>{(text.length===0)?0:(text.split(\" \").length)} words, {text.length} characters.</p>\r\n            <p>{(text.length===0)?0:(0.008 * text.split(\" \").length)} minutes read.</p>\r\n            <h2>{text.length===0?\"Enter text to preview here...\":\"Preview\"}</h2>\r\n            <p>{text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && \r\n        <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{(props.alert.type).toUpperCase()}</strong>    {props.alert.msg}\r\n                {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport {useState} from 'react';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() { \n  const [darkMode, setDarkMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({msg: message, type: type});\n    setTimeout(()=>{\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleMode = (event)=>{\n    let theme = event.target.id;\n    if(theme===\"light\"){\n      setDarkMode(\"light\");\n      document.body.style.backgroundColor='white';\n      document.body.style.color='black';\n      showAlert(\"Light mode has been enabled.\", \"success\");\n    }\n    else if(theme===\"dark\"){  \n      setDarkMode(\"dark\");\n      document.body.style.backgroundColor='#191919';\n      document.body.style.color='white';\n      showAlert(\"Dark mode has been enabled.\", \"success\");\n    }\n    else if(theme==='green'){\n      setDarkMode(\"green\");\n      document.body.style.backgroundColor='#198754';\n      document.body.style.color='white';\n      showAlert(\"Green mode has been enabled.\", \"success\");\n    }\n    else{      \n      setDarkMode(\"blue\");\n      document.body.style.backgroundColor='grey';\n      document.body.style.color='white';\n      showAlert(\"Grey mode has been enabled.\", \"success\");\n    }\n  }\n\n\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"Text Manip\" mode={darkMode} toggleMode={toggleMode}/>\n      <div className=\"container my-3\">\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About/>\n            </Route>\n\n            <Route exact path=\"/\"> */}\n              <Alert alert={alert}/>\n              <TextForm showAlert={showAlert}/>\n            {/* </Route>\n        </Switch> */}\n      </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}